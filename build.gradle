buildscript {
    repositories {
        mavenCentral()
        maven {
            url = 'https://maven.minecraftforge.net/'
        }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version project.modVersion
group project.modGroup

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

repositories {
    maven {
        url 'https://nexus.seedfinding.com/repository/maven-seedfinding'
    }
    maven {
        url 'https://nexus.seedfinding.com/repository/maven-seedfinding-snapshots'
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    maven { url = 'https://repo.spongepowered.org/maven/' }
    maven { url = 'https://jitpack.io' }
    mavenCentral()
}

minecraft {
    mappings channel: "$mappingsChannel", version: "$mappingsVersion"

    runs {
        client {
            workingDirectory project.file('run')

            property 'fml.coreMods.load', 'com.Mod.mixin.SeedModMixinLoader'

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    jarLibs
}
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"

    jarLibs('org.spongepowered:mixin:0.8.5') {
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
    }
    jarLibs  "com.github.ZeroMemes:Alpine:1.5"

    // Hacky way to get mixin work
    annotationProcessor('org.spongepowered:mixin:0.8.5:processor') {
        exclude module: 'gson'
    }
    jarLibs ('com.seedfinding:mc_terrain:9e937ddb838e28e79423c287fa18b1ce66f061d7')
    jarLibs ('com.seedfinding:mc_biome:533cdb5ed955ff1c3106f9901aea6aa5b08fd781')
    implementation configurations.jarLibs
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

mixin {
    defaultObfuscationEnv 'searge'
    sourceSets {
        main {
            ext.refMap = 'mixins.SeedMod.refmap.json'
        }
    }
}
processResources {
    exclude '**/rawimagefiles'

    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        include 'mcmod.info'
        expand version: version, 'mcversion': minecraftVersion
    }
}
jar {
    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'MixinConfigs': 'mixins.SeedMod.json',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'com.Mod.mixin.SeedModMixinLoader',
                'ForceLoadAsMod': 'true',
        )
        from{
            configurations.jarLibs.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
}